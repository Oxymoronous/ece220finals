; left_most.asm

    .ORIG x3000

MAIN
    ; Set up stack
    LD R5, RSTACK
    LD R6, RSTACK

    ; Push argument to left_most
    LD R0, ROOT
    STR R0, R6, #0

    ; left_most(root)
    JSR LEFT_MOST

    ; Display leftmost element of tree
    LDR R0, R6, 0
    OUT

    HALT

ROOT
    .FILL x2003
RSTACK
    .FILL x7000

; char left_most(treenode *root)    // You may assume that root will never be NULL
; {
;     if (!root->left) {
;         return data;
;     }
;     return left_most(root->left);
; }
LEFT_MOST
    ; TODO: Setup activation record
	ADD	R6, R6, #-3	;allocate space for bookkeeping for Return value, return address and frame pointer
	STR	R7, R6, #1
	STR	R5, R6, #0
	ADD	R5, R6, #-1

    ; TODO: Check if root->left is NULL, if it is, branch to DONE
    ; if (!root->left)
	LDR	R0, R6, #3	;r1 has root->left
	LDR R0, R0, #0	;
	ADD R0, R0, #0
	BRz	DONE
	
    ; TODO: Call left_most(root->left) and place the return value
	;  root->left (R1) ->r5   ->R6 
    ; frame pointer    ->r6 
    ; Return address
    ; Return value
	; root
	
	ADD	R6, R6, #-1
	STR	R0, R6, #0
	JSR LEFT_MOST
	LDR R0, R6, #0
	ADD	R6, R6, #2
	STR R0, R6, #2

    ; left_most(root->left) in the correct location in the
    ; activation record.

    BR TEARDOWN

DONE
    ; TODO: return data: place the return value in the correct location
    ; in the activation record
	LDR	R0, R6, #3
	LDR R0, R0, #2
	STR R0, R6, #2
TEARDOWN
    ; TODO: teardown activation record prior to RET
	LDR	R5, R6, #0
	LDR	R7, R6, #1
	ADD	R6, R6, #2
    RET

    .END
